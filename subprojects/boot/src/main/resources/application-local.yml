############################################
#### Server
server:
  port: 8080



############################################
#### Spring
spring:
  #### Open Tracing
  zipkin:
    baseUrl: http://localhost:9411/

  #### Data Source
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    writer:
      jdbc-url: jdbc:postgresql://localhost:5432/postgres
      username: ENC(QMpSgUuJ5VCHA08hhI8pLA==) #-> postgre
      password: ENC(c0q2E7rL3PogXgnaxKGuy3Nt+SJ7a1dF) #-> postgres
      minimum-idle: 5
      maximum-pool-size: 5
    reader:
      jdbc-url: jdbc:postgresql://localhost:5432/postgres
      username: ENC(QMpSgUuJ5VCHA08hhI8pLA==) #-> postgre
      password: ENC(c0q2E7rL3PogXgnaxKGuy3Nt+SJ7a1dF) #-> postgres
      minimum-idle: 5
      maximum-pool-size: 5

  #### JPA
  jpa:
    database: postgresql
    hibernate:
      #ddl-auto: create-drop # FIXME : 반드시 제거
      use-new-id-generator-mappings: true
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true

  ## Cache - Redis
  cache:
    type: redis
  redis:
    host: localhost
    port: 6379

  #### Spring Cloud Stream
  cloud:
    stream:
      bindings:
        ## Inbound 채널 (메시지 수신 설정)
        sample-in:
          # Consumer Group
          group: group.${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지
          # Topic
          destination: inbound-topic-${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지

        # Outbound 채널 (메시지 발송 설정)
        sample-out:
          destination: outbound-topic-${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지

      # Kafka 설정
      kafka:
        binder:
          #brokers: [b-1.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-2.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-3.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-4.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-5.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-6.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092]
          brokers: [localhost:9092]



############################################
#### Logging
logging:
  level:
    com:
      lguplus:
        fleta: DEBUG
      zaxxer:
        hikari: DEBUG
      #      hibernate:
      #        SQL: DEBUG
      #        type: TRACE
      springframework:
        cache: TRACE
        cloud: DEBUG
        integration: DEBUG
        kafka: DEBUG
        orm:
          jpa: DEBUG
        transaction:
          interceptor: TRACE
    jdbc:
      audit: OFF
      sqltiming: DEBUG
      resultsettable: DEBUG
      connection: DEBUG
      resultset: OFF
      sqlonly: OFF
  pattern:
    level: "%5p [${spring.application.name}][%X{saId:-}][%X{stbMac:-}]"



############################################
#### Other Domain Application Service
service:
  msa-boilerplate:
    url: http://localhost:8080
  subscriber:
    url: http://subscriber.fleta.com
  vodlookup:
    url: http://vodlookup.fleta.com
  programming:
    url: http://programming.fleta.com



############################################
## FeignClient
feign:
  client:
    config:
      default:
        loggerLevel: FULL
