############################################
#### Server
server:
  port: 8080



############################################
#### Spring
spring:
  application:
    name-env: ${spring.application.name-abbr}-LOCAL  # 서비스 Prefix (캐시 키 등에 사용)

  #### Auto Configuration
  autoconfigure:
    exclude:
      # Spring Cloud Stream 자동 구성 제외
      - org.springframework.cloud.stream.config.BindingServiceConfiguration
      - org.springframework.cloud.stream.function.FunctionConfiguration

  #### Data Source
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    writer:
      jdbc-url: jdbc:postgresql://rds-dev-iptv-dev-iptvrs-01.cluster-c2as9ee4bg3m.ap-northeast-2.rds.amazonaws.com/msa_mylgdb?targetServerType=primary&ApplicationName=${spring.application.name}
      username: ENC(dZ4Kgqe0kCiYJDnhdsIq3A==)
      password: ENC(YYXWcESizOBBT7SfZrUDOpMR+5lasGTL)
      minimum-idle: 5
      maximum-pool-size: 5
    reader:
      jdbc-url: jdbc:postgresql://rds-dev-iptv-dev-iptvrs-01.cluster-c2as9ee4bg3m.ap-northeast-2.rds.amazonaws.com/msa_mylgdb?targetServerType=preferSecondary&loadBalanceHosts=true&ApplicationName=${spring.application.name}
      username: ENC(MnL8EYbZNuCgWzE/kkBK2w==)
      password: ENC(Qn96wg0a6P+FDLb5pcjrM8gY6s0zYaJD)
      minimum-idle: 5
      maximum-pool-size: 5

  #### JPA
  jpa:
    hibernate:
      ddl-auto: none # FIXME : 반드시 none으로 사용

  ## Cache - Redis
  cache:
    type: redis
  redis:
    host: localhost
    port: 6379

  #### Spring Cloud Stream
  cloud:
    stream:
      bindings:
        ## Inbound 채널 (메시지 수신 설정)
        sample-in:
          # Consumer Group
          group: group.${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지
          # Topic
          destination: inbound-topic-${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지

        # Outbound 채널 (메시지 발송 설정)
        sample-out:
          destination: outbound-topic-${spring.application.name}.YOUR-ID  # TODO : 개발자 아이디를 포함하여 중복 방지

      # Kafka 설정
      kafka:
        binder:
          #brokers: [b-1.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-2.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-3.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-4.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-5.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092,b-6.msk-dev-iptv-msa.66adcz.c2.kafka.ap-northeast-2.amazonaws.com:9092]
          brokers: [localhost:9092]



############################################
#### Logging
logging:
  level:
    com.lguplus.fleta: DEBUG
    #com.zaxxer.hikari: DEBUG
    org.hibernate:
      SQL: DEBUG
      #type: TRACE
    org.springframework:
      cache: TRACE
      cloud: DEBUG
      integration: DEBUG
      kafka: DEBUG
      orm.jpa: DEBUG
      transaction:
        interceptor: TRACE
    jdbc:
      audit: OFF
      sqltiming: DEBUG
      resultsettable: DEBUG
      connection: DEBUG
      resultset: OFF
      sqlonly: OFF
  pattern:
    level: "%5p [${spring.application.name}][%X{saId:-}][%X{stbMac:-}]"



############################################
#### Other Domain Application Service
service:
  msa-boilerplate:
    url: http://localhost:8080
  subscriber:
    url: http://subscriber.fleta.com
  vodlookup:
    url: http://vodlookup.fleta.com
  programming:
    url: http://programming.fleta.com



############################################
## FeignClient
feign:
  client:
    config:
      default:
        loggerLevel: FULL
