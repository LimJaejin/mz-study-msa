############################################
#### Server
server:
  port: 8080
  shutdown: graceful
  tomcat:
    connection-timeout: 2800
    threads:
      max: 250
      min-spare: 250



############################################
#### Spring
spring:
  application:
    name: msa-boilerplate  # TODO : 수정 후, 이 주석은 삭제하세요!
    # TODO : 서비스 도메인 약어 수정 후, 이 라인과 다음 라인은 삭제하세요!
    # TODO : https://lgu-cto.atlassian.net/wiki/spaces/LGUPLUSMSA/pages/888045703/ -> 4-2) 도메인 약어 항목 참고
    name-abbr: MB  # 서비스 도메인 약어
  lifecycle:
    timeout-per-shutdown-phase: 1m
  profiles:
    active: local

  #### Open Tracing
  zipkin:
    enabled: false

  #### Message Source
  messages:
    basename: messages/response
    encoding: utf-8

  #### Data Source
  datasource:
    hikari:
      connection-timeout: 2700
      validation-timeout: 2100
      leak-detection-threshold: 10000
      max-lifetime: 540000
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 500
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true

  #### JPA
  jpa:
    open-in-view: false
    properties:
      hibernate:
        default_batch_fetch_size: 100

  #### Redis
  redis:
    timeout: 500  # Redis read timeout
    connect-timeout: 100

  #### Spring Cloud Stream
  cloud:
    stream:
      bindings:
        ## Inbound 채널 (메시지 수신 설정)
        sample-in:
          # Consumer Group
          group: group.${spring.application.name}
          # Topic
          destination: inbound-topic-${spring.application.name} # TODO : 수정 후, 이 주석은 삭제하세요!
          content-type: application/json
          consumer:
            max-attempts: 3

        # DLQ Inbound 채널 설정
        dlq-sample-in:
          # Consumer Group
          group: dlq.group.${spring.application.name}
          # Topic
          destination: dlq.inbound-topic-${spring.application.name} # TODO : 수정 후, 이 주석은 삭제하세요!

        # Outbound 채널 (메시지 발송 설정)
        # (보통 내부 MSA 서비스와 통신할 Topic을 정의하기 때문에 송/수신용의 동일한 토픽을 사용할 일은 거의 없으나 테스트를 위해 발송 채널 정의)
        sample-out:
          destination: outbound-topic-${spring.application.name} # TODO : 수정 후, 이 주석은 삭제하세요!

      # Kafka 설정
      # (Kafka, RabbitMQ, AWS SNS/SQS 등의 설정, 메시지 큐 변경 시 아래 부분만 수정하면 연동 및 비즈니스 로직은 수정할 필요가 없음)
      kafka:
        binder:
          auto-create-topics: true
          #auto-add-partitions: true
        bindings:
          sample-in:
            # Dead Letter Processing
            consumer:
              enableDlq: true
              # DLQ Topic
              dlqName: dlq.outbound-topic-${spring.application.name}



############################################
#### Logging
logging:
  level:
    root: INFO
  pattern:
    level: "%5p [${spring.application.name},%X{traceId:-},%X{spanId:-}][%X{saId:-}][%X{stbMac:-}]"



############################################
#### FeignClient
feign:
  client:
    config:
      default: # @FeignClient의 value/name 속성 (default는 전체 적용)
        connectTimeout: 2000
        readTimeout: 2000
        #### Logging Level
        # NONE    : 미로깅 (Default)
        # BASIC   : Request Method, URL, Response 상태 코드, 실행 시간 로깅
        # HEADERS : Request, Response Header, 기본정보 로깅
        # FULL    : Request, Response Header, Response Body, 메타정보 로깅
        loggerLevel: NONE
  httpclient:
    enabled: true
    connection-timeout: 2900
    max-connections: 100



############################################
## Actuator
management:
  endpoint:
    health:
      enabled: true
